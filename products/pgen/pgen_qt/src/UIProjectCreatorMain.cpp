/*
    UIProjectCreatorMain.cpp
    
///
/// CBTek LLC ("COMPANY") CONFIDENTIAL
/// Copyright (c) 2016 CBTek, All Rights Reserved.
///
/// NOTICE:  All information contained herein is, and remains the property of COMPANY. The intellectual and technical concepts contained
/// herein are proprietary to COMPANY and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained
/// from COMPANY.  Access to the source code contained herein is hereby forbidden to anyone except current COMPANY employees, managers or contractors who have executed
/// Confidentiality and Non-disclosure agreements explicitly covering such access.
///
/// The copyright notice above does not evidence any actual or intended publication or disclosure  of  this source code, which includes
/// information that is confidential and/or proprietary, and is a trade secret, of  COMPANY.   ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC  PERFORMANCE,
/// OR PUBLIC DISPLAY OF OR THROUGH USE  OF THIS  SOURCE CODE  WITHOUT  THE EXPRESS WRITTEN CONSENT OF COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE
/// LAWS AND INTERNATIONAL TREATIES.  THE RECEIPT OR POSSESSION OF  THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY ANY RIGHTS
/// TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL ANYTHING THAT IT  MAY DESCRIBE, IN WHOLE OR IN PART.
///

*/
//UIProjectCreatorMain.cpp generated by cbtek on 10-11-2016 at 10:15:49 PM

#include "UIProjectCreatorMain.h"
#include "ui_UIProjectCreatorMain.h"

#include <QFileDialog>
#include <QMessageBox>
#include <QPainter>

#include "utility/inc/FileUtils.hpp"

#include "pgen_utils/inc/ProjectGen.h"

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace development {
namespace projectgen {



UIProjectCreatorMain::UIProjectCreatorMain(const QString &  rootProjectFolder,
                                           QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIProjectCreatorMain)
{
    m_ui->setupUi(this);
    m_rootProjectDir = QDir(rootProjectFolder);
    m_commonProjectDir = QDir(rootProjectFolder+"/common");
    m_productsProjectDir = QDir(rootProjectFolder+"/products");
    m_ui->m_txtBrowse->setText(rootProjectFolder);
    m_toggleTree = false;
    connect(m_ui->m_btnCancel,SIGNAL(clicked(bool)),this,SLOT(onCancel()));
    connect(m_ui->m_btnBrowse,SIGNAL(clicked(bool)),this,SLOT(onBrowse()));
    connect(m_ui->m_btnNewExeProject,SIGNAL(clicked(bool)),this,SLOT(onCreateCPPApplication()));
    connect(m_ui->m_btnNewLibProject,SIGNAL(clicked(bool)),this,SLOT(onCreateCPPLibrary()));
    connect(m_ui->m_btnQtNewExeProject,SIGNAL(clicked(bool)),this,SLOT(onCreateQtApplication()));
    connect(m_ui->m_btnQtNewLibProject,SIGNAL(clicked(bool)),this,SLOT(onCreateQtLibrary()));
    connect(m_ui->m_btnCodeBase,SIGNAL(clicked(bool)),this,SLOT(onCreateCodeBase()));
    m_isFlash = false;
    m_flashTimerId = 0;
    m_flashValue = 0;

}


UIProjectCreatorMain::~UIProjectCreatorMain()
{
    delete m_ui;
}

void UIProjectCreatorMain::paintEvent(QPaintEvent *event)
{
    QPainter g(this);
    if (m_isFlash)
    {
        g.fillRect(0,0,width(),height(),QColor(0,255,0,m_flashValue));
    }
}

void UIProjectCreatorMain::timerEvent(QTimerEvent *event)
{
    m_flashValue-=2;
    if (m_flashValue<0)
    {
        this->killTimer(m_flashTimerId);
        m_flashValue=0;
    }
    update();
}

void UIProjectCreatorMain::onShowFlash()
{
    m_flashValue=200;
    m_isFlash=true;
    m_flashTimerId = startTimer(10);
}

void UIProjectCreatorMain::onCreateCodeBase()
{
    try
    {
        ProjectGen(ProjectGenType::CODEBASE,
                   m_ui->m_txtProjectName->text().toStdString(),
                   m_ui->m_txtBrowse->text().toStdString()).generate();
    }
    catch(const std::exception & e)
    {
        QMessageBox::critical(this,"Error!",QString::fromStdString(std::string(e.what())));
        return;
    }
    onShowFlash();
}

void UIProjectCreatorMain::onCreateCPPLibrary()
{
    try
    {
        ProjectGen(ProjectGenType::CPP_LIBRARY,
                   m_ui->m_txtProjectName->text().toStdString(),
                   m_ui->m_txtBrowse->text().toStdString()).generate();
    }
    catch(const std::exception & e)
    {
        QMessageBox::critical(this,"Error!",QString::fromStdString(std::string(e.what())));
    }
    onShowFlash();
}

void UIProjectCreatorMain::onCreateCPPApplication()
{
    try
    {
        ProjectGen(ProjectGenType::CPP_APPLICATION,
                   m_ui->m_txtProjectName->text().toStdString(),
                   m_ui->m_txtBrowse->text().toStdString()).generate();
    }
    catch(const std::exception & e)
    {
        QMessageBox::critical(this,"Error!",QString::fromStdString(std::string(e.what())));
        return;
    }
    onShowFlash();
}

void UIProjectCreatorMain::onCreateQtLibrary()
{
    try
    {
        ProjectGen(ProjectGenType::QT_LIBRARY,
                   m_ui->m_txtProjectName->text().toStdString(),
                   m_ui->m_txtBrowse->text().toStdString()).generate();
    }
    catch(const std::exception & e)
    {
        QMessageBox::critical(this,"Error!",QString::fromStdString(std::string(e.what())));
        return;
    }
    onShowFlash();
}

void UIProjectCreatorMain::onCreateQtApplication()
{

    try
    {
        ProjectGen(ProjectGenType::QT_APPLICATION,
                   m_ui->m_txtProjectName->text().toStdString(),
                   m_ui->m_txtBrowse->text().toStdString()).generate();
    }
    catch(const std::exception & e)
    {
        QMessageBox::critical(this,"Error!",QString::fromStdString(std::string(e.what())));
        return;
    }
    onShowFlash();
}

void UIProjectCreatorMain::onCancel()
{
    this->close();
}

void UIProjectCreatorMain::onBrowse()
{
    QString rootProjectFolder = QFileDialog::getExistingDirectory(this,"Select Project Directory");
    m_ui->m_txtBrowse->setText(rootProjectFolder);
}

}}}}//end namespace


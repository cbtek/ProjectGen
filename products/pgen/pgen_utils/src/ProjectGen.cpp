/*
    ProjectGen.cpp

    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//----------------------------------------
//ProjectGen.cpp generated by cbtek on 11-25-2016 at 04:54:55 AM
//----------------------------------------
#include "ProjectGen.h"

#include "utility/inc/FileUtils.hpp"
#include "utility/inc/SystemUtils.hpp"

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace development {
namespace projectgen {

ProjectGen::ProjectGen(ProjectGenType type,
                       const std::string &name,
                       const std::string &path)
{    
    m_name=FileUtils::getSanitizedPathName(name);
    m_path=FileUtils::buildFilePath(path,m_name);
    m_type=type;

}

void ProjectGen::generate()
{
    if (StringUtils::trimmed(m_name).empty())
    {
        throw InvalidOperationException(EXCEPTION_TAG+"No name was specified for this project!");
    }

    std::string appPath         = SystemUtils::getApplicationDirectory();
    std::string buildCMakePath  = FileUtils::buildFilePath(appPath,".pgen_templates/build.cmake");
    std::string flagsCMakePath  = FileUtils::buildFilePath(appPath,".pgen_templates/flags.cmake");
    std::string cppLibCMakePath = FileUtils::buildFilePath(appPath,".pgen_templates/c++_library.cmake");
    std::string qtLibCMakePath  = FileUtils::buildFilePath(appPath,".pgen_templates/qt_library.cmake");
    std::string cppAppCMakePath = FileUtils::buildFilePath(appPath,".pgen_templates/c++_application.cmake");
    std::string qtAppCMakePath  = FileUtils::buildFilePath(appPath,".pgen_templates/qt_application.cmake");
    std::string cppMainPath     = FileUtils::buildFilePath(appPath,".pgen_templates/c++_main.cpp");
    std::string qtMainPath      = FileUtils::buildFilePath(appPath,".pgen_templates/qt_main.cpp");
    std::string basePath        = FileUtils::buildFilePath(appPath,".pgen_templates/base.cmake");

        bool hasBaseFiles       =     FileUtils::fileExists(buildCMakePath)
                                   && FileUtils::fileExists(basePath)
                                   && FileUtils::fileExists(flagsCMakePath);


    bool hasCPPLibraryFiles     = FileUtils::fileExists(cppLibCMakePath);
    bool hasQtLibraryFiles      = FileUtils::fileExists(qtLibCMakePath);

    bool hasCPPApplicationFiles = FileUtils::fileExists(cppMainPath)
                              &&  FileUtils::fileExists(cppAppCMakePath);

    bool hasQtApplicationFiles  = FileUtils::fileExists(qtMainPath)
                              &&  FileUtils::fileExists(qtAppCMakePath);




    if (!hasBaseFiles ||
        !hasCPPApplicationFiles ||
        !hasCPPLibraryFiles ||
        !hasQtApplicationFiles ||
        !hasQtLibraryFiles)
    {

        buildCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/build.cmake");
        flagsCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/flags.cmake");
        cppLibCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/c++_library.cmake");
        qtLibCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/qt_library.cmake");
        cppAppCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/c++_application.cmake");
        qtAppCMakePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/qt_application.cmake");
        cppMainPath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/c++_main.cpp");
        qtMainPath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/qt_main.cpp");
        basePath=FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen_templates/base.cmake");

        hasBaseFiles       = FileUtils::fileExists(buildCMakePath)
                          && FileUtils::fileExists(basePath)
                          && FileUtils::fileExists(flagsCMakePath);

    hasCPPLibraryFiles     = FileUtils::fileExists(cppLibCMakePath);
    hasQtLibraryFiles      = FileUtils::fileExists(qtLibCMakePath);

    hasCPPApplicationFiles = FileUtils::fileExists(cppMainPath)
                         &&  FileUtils::fileExists(cppAppCMakePath);

    hasQtApplicationFiles  = FileUtils::fileExists(qtMainPath)
                         &&  FileUtils::fileExists(qtAppCMakePath);
    }

    if (!hasBaseFiles ||
        !hasCPPApplicationFiles ||
        !hasCPPLibraryFiles ||
        !hasQtApplicationFiles ||
        !hasQtLibraryFiles)
    {
        throw InvalidOperationException(EXCEPTION_TAG+"Could not find location of template files for pgen!");
    }

    FileUtils::createDirectory(m_path);

    switch(m_type)
    {
        case ProjectGenType::CPP_LIBRARY:
        {
            std::string contents = FileUtils::getFileContents(cppLibCMakePath);
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"inc"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"src"));
            FileUtils::writeFileContents(FileUtils::buildFilePath(m_path,"CMakeLists.txt"),contents);
        }
        break;
        case ProjectGenType::CPP_APPLICATION:
        {
            std::string contents = FileUtils::getFileContents(cppAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(cppMainPath);
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            std::string sourceFolder = FileUtils::buildFilePath(m_path,"src");
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"inc"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"src"));
            FileUtils::writeFileContents(FileUtils::buildFilePath(m_path,"CMakeLists.txt"),contents);
            FileUtils::writeFileContents(FileUtils::buildFilePath(sourceFolder,"main.cpp"),mainContents);

        }
        break;
        case ProjectGenType::QT_APPLICATION:
        {
            std::string contents = FileUtils::getFileContents(qtAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(qtMainPath);
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            std::string sourceFolder = FileUtils::buildFilePath(m_path,"src");
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"inc"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"src"));
            FileUtils::writeFileContents(FileUtils::buildFilePath(m_path,"CMakeLists.txt"),contents);
            FileUtils::writeFileContents(FileUtils::buildFilePath(sourceFolder,"main.cpp"),mainContents);
        }
        break;
        case ProjectGenType::QT_LIBRARY:
        {

            std::string contents = FileUtils::getFileContents(qtLibCMakePath);
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"inc"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"src"));
            FileUtils::writeFileContents(FileUtils::buildFilePath(m_path,"CMakeLists.txt"),contents);
        }
        break;
        case ProjectGenType::CODEBASE:
        {
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"products"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"common"));
            FileUtils::createDirectory(FileUtils::buildFilePath(m_path,"cmake"));

            std::string cmakeOutputPath = FileUtils::buildFilePath(m_path,"cmake");

            //get template content
            std::string flagsContents = FileUtils::getFileContents(flagsCMakePath);
            std::string buildContents = FileUtils::getFileContents(buildCMakePath);
            std::string baseContents = FileUtils::getFileContents(basePath);

            //replace with project name
            StringUtils::replaceInPlace(buildContents,"%%PROJECT_NAME%%",m_name);
            StringUtils::replaceInPlace(baseContents,"%%PROJECT_NAME%%",m_name);

            //write contents to new path
            FileUtils::writeFileContents(FileUtils::buildFilePath(cmakeOutputPath,"flags.cmake"),flagsContents);
            FileUtils::writeFileContents(FileUtils::buildFilePath(cmakeOutputPath,"build.cmake"),buildContents);
            FileUtils::writeFileContents(FileUtils::buildFilePath(m_path,"CMakeLists.txt"),baseContents);


            //create cpp project
            std::string contents = FileUtils::getFileContents(cppAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(cppMainPath);
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%","test_"+m_name);
            std::string folder = FileUtils::buildFilePath(m_path,"products/test_"+m_name);
            FileUtils::createDirectory(folder);
            std::string sourceFolder = FileUtils::buildFilePath(folder,"src");
            FileUtils::createDirectory(FileUtils::buildFilePath(folder,"inc"));
            FileUtils::createDirectory(FileUtils::buildFilePath(folder,"src"));
            FileUtils::writeFileContents(FileUtils::buildFilePath(folder,"CMakeLists.txt"),contents);
            FileUtils::writeFileContents(FileUtils::buildFilePath(sourceFolder,"test_"+m_name+".cpp"),mainContents);

        }
        break;

        default:
            throw InvalidOperationException("Invalid type was detected for ProjectGen");
    }
}

ProjectGen::~ProjectGen()
{

}



}}}}//end namespace



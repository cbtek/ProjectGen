/*
    ProjectGen.cpp

    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//----------------------------------------
//ProjectGen.cpp generated by cbtek on 11-25-2016 at 04:54:55 AM
//----------------------------------------
#include "ProjectGen.h"

#include "utility/inc/FileUtils.h"
#include "utility/inc/SystemUtils.h"
#include "utility/inc/StringUtils.h"

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace development {
namespace projectgen {

static std::ofstream s_log;

ProjectGen::ProjectGen(ProjectGenType type,
                       const std::string &name,
                       const std::string &path,
                       bool enableLog)
{    
    m_name=FileUtils::getSanitizedPathName(name);
    m_path=FileUtils::buildFilePath(path,m_name);
    m_type=type;
    m_enableLogging = enableLog;
    if (enableLog)
    {
        s_log.open((FileUtils::buildFilePath(SystemUtils::getUserHomeDirectory(),".pgen.log").c_str()));
    }
}

void ProjectGen::generate()
{    
    if (StringUtils::trimmed(m_name).empty())
    {
        s_log << (EXCEPTION_TAG+"No name was specified for this project!")<<std::endl;
        throw InvalidOperationException(EXCEPTION_TAG+"No name was specified for this project!");
    }

    #ifdef __gnu_linux__
        if (isValidTemplatePath(SystemUtils::getCurrentExecutableDirectory()) ||
            isValidTemplatePath(SystemUtils::getUserHomeDirectory()) ||
            isValidTemplatePath(SystemUtils::getUserAppDirectory()) ||
            isValidTemplatePath("/usr/local/share") ||
            isValidTemplatePath("/usr/share"))
        {
            if (FileUtils::createDirectory(m_path))
            {
                s_log << "Successfully created output path at \""<<m_path<<"\""<<std::endl;
            }
            else
            {
                s_log << "Failed to create output path at \""<<m_path<<"\""<<std::endl;
            }
            buildProject();

        }
        else
        {
            s_log << (EXCEPTION_TAG+"Could not find location of template files for pgen!") << std::endl;
            throw InvalidOperationException(EXCEPTION_TAG+"Could not find location of template files for pgen!");
        }
    #else
        if (isValidTemplatePath(SystemUtils::getApplicationDirectory()) ||
            isValidTemplatePath(SystemUtils::getUserHomeDirectory()) ||
            isValidTemplatePath(SystemUtils::getUserAppDirectory()))
        {
            if (FileUtils::createDirectory(m_path))
            {
                s_log << "Successfully created output path at \""<<m_path<<"\""<<std::endl;
            }
            else
            {
                s_log << "Failed to create output path at \""<<m_path<<"\""<<std::endl;
            }
            buildProject();
        }
        else
        {
            s_log << (EXCEPTION_TAG+"Could not find location of template files for pgen!") << std::endl;
            throw InvalidOperationException(EXCEPTION_TAG+"Could not find location of template files for pgen!");
        }
    #endif

}

ProjectGen::~ProjectGen()
{
    s_log.close();
}

bool ProjectGen::isValidTemplatePath(const std::string &path)
{
    m_buildCMakePath  = FileUtils::buildFilePath(path,"share/pgen/build_config.cmake");
    m_cppLibCMakePath = FileUtils::buildFilePath(path,"share/pgen/c++_library.cmake");
    m_qtLibCMakePath  = FileUtils::buildFilePath(path,"share/pgen/qt_library.cmake");
    m_cppAppCMakePath = FileUtils::buildFilePath(path,"share/pgen/c++_application.cmake");
    m_qtAppCMakePath  = FileUtils::buildFilePath(path,"share/pgen/qt_application.cmake");
    m_cppMainPath     = FileUtils::buildFilePath(path,"share/pgen/c++_main.cpp");
    m_qtMainPath      = FileUtils::buildFilePath(path,"share/pgen/qt_main.cpp");
    m_basePath        = FileUtils::buildFilePath(path,"share/pgen/base.cmake");


    s_log << "Template Check at "<< path<<std::endl<<"{"<<std::endl;
    s_log << "\tCMake Build Template Path: "<<m_buildCMakePath<<std::endl;    
    s_log << "\tCPP Library Template Path: "<<m_cppLibCMakePath<<std::endl;
    s_log << "\tQt Library Template Path: "<<m_qtLibCMakePath<<std::endl;
    s_log << "\tCPP Application Template Path: "<<m_cppAppCMakePath<<std::endl;
    s_log << "\tQt Application Template Path: "<<m_qtAppCMakePath<<std::endl;
    s_log << "\tCPP main.cpp Template Path: "<<m_cppMainPath<<std::endl;
    s_log << "\tQt main.cpp Template Path: "<<m_qtMainPath<<std::endl;
    s_log << "\tBase project Template Path: "<<m_basePath<<std::endl;

        bool hasBaseFiles       =     FileUtils::fileExists(m_buildCMakePath)
                                   && FileUtils::fileExists(m_basePath);


    bool hasCPPLibraryFiles     = FileUtils::fileExists(m_cppLibCMakePath);
    bool hasQtLibraryFiles      = FileUtils::fileExists(m_qtLibCMakePath);

    bool hasCPPApplicationFiles = FileUtils::fileExists(m_cppMainPath)
                              &&  FileUtils::fileExists(m_cppAppCMakePath);

    bool hasQtApplicationFiles  = FileUtils::fileExists(m_qtMainPath)
                              &&  FileUtils::fileExists(m_qtAppCMakePath);


    s_log <<"\n\tHAS BASE FILES: "<< (hasBaseFiles?"TRUE":"FALSE")<<std::endl;
    s_log <<"\tHAS CPP LIBRARY FILES: "<< (hasCPPLibraryFiles?"TRUE":"FALSE")<<std::endl;
    s_log <<"\tHAS QT LIBRARY FILES: "<< (hasQtLibraryFiles?"TRUE":"FALSE")<<std::endl;
    s_log <<"\tHAS CPP APPLICATION FILES: "<< (hasCPPApplicationFiles?"TRUE":"FALSE")<<std::endl;
    s_log <<"\tHAS QT APPLICATION FILES: "<< (hasQtApplicationFiles?"TRUE":"FALSE")<<std::endl<<"}"<<std::endl<<std::endl;
    return (hasBaseFiles && hasCPPLibraryFiles && hasQtLibraryFiles && hasCPPApplicationFiles && hasQtApplicationFiles);

}

void ProjectGen::buildProject()
{

    std::string incPath;
    std::string srcPath;    
    std::string buildPath;
    std::string mainPath;
    std::string cmakePath;
    std::string productsPath;
    std::string commonPath;

    switch(m_type)
    {
        case ProjectGenType::CPP_LIBRARY:
        {
            s_log << "SETTING UP CPP LIBRARY"<<std::endl<<"{"<<std::endl;
            std::string contents = FileUtils::getFileContents(m_cppLibCMakePath);
            if (contents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppLibCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppLibCMakePath+"\"");
            }
            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            incPath = FileUtils::buildFilePath(m_path,"inc");
            srcPath = FileUtils::buildFilePath(m_path,"src");
            cmakePath = FileUtils::buildFilePath(m_path,"CMakeLists.txt");

            FileUtils::createDirectory(incPath);
            FileUtils::createDirectory(srcPath);
            FileUtils::writeFileContents(cmakePath,contents);
            s_log << "\tCreating path at \""<<incPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<srcPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl<<"}"<<std::endl<<std::endl;

        }
        break;
        case ProjectGenType::CPP_APPLICATION:
        {
            s_log << "SETTING UP CPP APPLICATION"<<std::endl<<"{"<<std::endl;
            std::string contents = FileUtils::getFileContents(m_cppAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(m_cppMainPath);

            if (contents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppAppCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppAppCMakePath+"\"");
            }

            if (mainContents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppMainPath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppMainPath+"\"");
            }

            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            incPath = FileUtils::buildFilePath(m_path,"inc");
            srcPath = FileUtils::buildFilePath(m_path,"src");
            cmakePath = FileUtils::buildFilePath(m_path,"CMakeLists.txt");
            mainPath = FileUtils::buildFilePath(srcPath,"main.cpp");

            FileUtils::createDirectory(incPath);
            FileUtils::createDirectory(srcPath);
            FileUtils::writeFileContents(cmakePath,contents);
            FileUtils::writeFileContents(mainPath,mainContents);

            s_log << "\tCreating path at \""<<incPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<srcPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<mainPath<<"\""<<std::endl <<"}"<< std::endl<<std::endl;

        }
        break;
        case ProjectGenType::QT_APPLICATION:
        {
            s_log << "SETTING UP QT APPLICATION"<<std::endl<<"{"<<std::endl;
            std::string contents = FileUtils::getFileContents(m_qtAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(m_qtMainPath);

            if (contents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtAppCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtAppCMakePath+"\"");
            }

            if (mainContents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtMainPath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtMainPath+"\"");
            }


            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);

            incPath = FileUtils::buildFilePath(m_path,"inc");
            srcPath = FileUtils::buildFilePath(m_path,"src");
            cmakePath = FileUtils::buildFilePath(m_path,"CMakeLists.txt");
            mainPath = FileUtils::buildFilePath(srcPath,"main.cpp");

            FileUtils::createDirectory(incPath);
            FileUtils::createDirectory(srcPath);
            FileUtils::writeFileContents(cmakePath,contents);
            FileUtils::writeFileContents(mainPath,mainContents);

            s_log << "\tCreating path at \""<<incPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<srcPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<mainPath<<"\""<<std::endl<<"}"<<std::endl<<std::endl;

        }
        break;
        case ProjectGenType::QT_LIBRARY:
        {

            s_log << "SETTING UP QT LIBRARY"<<std::endl<<"{"<<std::endl;
            std::string contents = FileUtils::getFileContents(m_qtLibCMakePath);
            if (contents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtLibCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_qtLibCMakePath+"\"");
            }

            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%",m_name);
            incPath = FileUtils::buildFilePath(m_path,"inc");
            srcPath = FileUtils::buildFilePath(m_path,"src");
            cmakePath = FileUtils::buildFilePath(m_path,"CMakeLists.txt");

            FileUtils::createDirectory(incPath);
            FileUtils::createDirectory(srcPath);
            FileUtils::writeFileContents(cmakePath,contents);

            s_log << "\tCreating path at \""<<incPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<srcPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl<<"}"<<std::endl<<std::endl;
        }
        break;
        case ProjectGenType::CODEBASE:
        {
            s_log << "SETTING UP CODEBASE"<<std::endl<<"{"<<std::endl;
            productsPath = FileUtils::buildFilePath(m_path,"products");
            commonPath = FileUtils::buildFilePath(m_path,"common");
            cmakePath = FileUtils::buildFilePath(m_path,"cmake");
            FileUtils::createDirectory(productsPath);
            FileUtils::createDirectory(commonPath);
            FileUtils::createDirectory(cmakePath);

            s_log << "\tCreating path at \""<<productsPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<commonPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl;


            std::string cmakeOutputPath = m_path;

            //get template content


            std::string buildContents = FileUtils::getFileContents(m_buildCMakePath);
            if (buildContents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_buildCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_buildCMakePath+"\"");
            }


            std::string baseContents = FileUtils::getFileContents(m_basePath);
            if (baseContents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_basePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_basePath+"\"");
            }


            //replace with project name
            StringUtils::replaceInPlace(buildContents,"%%PROJECT_NAME%%",m_name);
            StringUtils::replaceInPlace(baseContents,"%%PROJECT_NAME%%",m_name);

            //write contents to new path            
            buildPath = FileUtils::buildFilePath(cmakeOutputPath,"build_config.cmake");
            cmakePath = FileUtils::buildFilePath(m_path,"CMakeLists.txt");            
            FileUtils::writeFileContents(buildPath,buildContents);
            FileUtils::writeFileContents(cmakePath,baseContents);            
            s_log << "\tCreating path at \""<<buildPath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl;


            //create cpp project
            std::string contents = FileUtils::getFileContents(m_cppAppCMakePath);
            std::string mainContents = FileUtils::getFileContents(m_cppMainPath);

            if (contents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppAppCMakePath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppAppCMakePath+"\"");
            }

            if (mainContents.size() == 0)
            {
                s_log << (EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppMainPath+"\"") << std::endl;
                s_log.close();
                throw InvalidOperationException(EXCEPTION_TAG+"Failed to get any contents from file at \""+m_cppMainPath+"\"");
            }


            StringUtils::replaceInPlace(contents,"%%PROJECT_NAME%%","test_"+m_name);
            std::string folder = FileUtils::buildFilePath(m_path,"products/test_"+m_name);
            cmakePath = FileUtils::buildFilePath(folder,"CMakeLists.txt");
            FileUtils::createDirectory(folder);
            srcPath = FileUtils::buildFilePath(folder,"src");
            incPath = FileUtils::buildFilePath(folder,"inc");
            mainPath = FileUtils::buildFilePath(srcPath,"test_"+m_name+".cpp");
            FileUtils::createDirectory(srcPath);
            FileUtils::createDirectory(incPath);
            FileUtils::writeFileContents(cmakePath,contents);
            FileUtils::writeFileContents(mainPath,mainContents);
            s_log << "\tCreating path at \""<<folder<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<cmakePath<<"\""<<std::endl;
            s_log << "\tCreating path at \""<<mainPath<<"\""<<std::endl<<"}"<<std::endl<<std::endl;
        }
        break;

        default:
            throw InvalidOperationException("Invalid type was detected for ProjectGen");
    }
}

}}}}//end namespace



/*
    ConsoleUtils.cpp
    

*/
//----------------------------------------
//ConsoleUtils.cpp generated by cbtek on 03-28-2018 at 01:47:16 PM
//----------------------------------------

#include "ConsoleUtils.h"

BEG_NAMESPACE_CBTEK_UTILITY
char ConsoleUtils::getKeyCharacter()
{
    return getch();
}

void ConsoleUtils::setConsoleColor(ConsoleColors text_color,
                                   ConsoleColors foreground_color)
{
    int text = static_cast<int>(text_color);
    int foreground = static_cast<int>(foreground_color);

    #ifdef __WIN32
        HANDLE H = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(H, foreground * 16 + text);
    #else
        char color[4];
        if (text >= 0 && text < 100 && foreground >= 0 && foreground < 100)
        {
            sprintf(color, "%d", text);
            printf("\033[%sm", color);
            sprintf(color, "%d", foreground + 10);
            printf("\033[%sm", color);
        }
    #endif
}

void ConsoleUtils::clearScreen()
{

    #ifdef WINDOWS
        system("cls");
    #else
        system("clear");
    #endif
}

void ConsoleUtils::moveCursor(int row, int column)
{

    #ifdef WINDOWS
        COORD Coord;
        Coord.X = column;
        Coord.Y = row;
        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Coord);
    #else
        printf("\033[%d;%dH", row + 1, column + 1);
    #endif
}


#ifdef UNIX
termios ConsoleUtils::new_termios = termios();
termios ConsoleUtils::old_termios = termios();

void ConsoleUtils::initTermios(int echo)
{
  tcgetattr(0, &old_termios); /* grab old_termios terminal i/o settings */
  new_termios = old_termios; /* make new_termios settings same as old_termios settings */
  new_termios.c_lflag &= ~ICANON; /* disable buffered i/o */
  if (echo) {
      new_termios.c_lflag |= ECHO; /* set echo mode */
  } else {
      new_termios.c_lflag &= ~ECHO; /* set no echo mode */
  }
  tcsetattr(0, TCSANOW, &new_termios); /* use these new_termios terminal i/o settings now */
}

void ConsoleUtils::resetTermios()
{
    tcsetattr(0, TCSANOW, &old_termios);
}

char ConsoleUtils::getch_(int echo)
{
    char ch;
    initTermios(echo);
    ch = getchar();
    resetTermios();
    return ch;
}

char ConsoleUtils::getch()
{
    return getch_(0);
}

char ConsoleUtils::getche()
{
    return getch_(1);

}
#endif

END_NAMESPACE_CBTEK_UTILITY



